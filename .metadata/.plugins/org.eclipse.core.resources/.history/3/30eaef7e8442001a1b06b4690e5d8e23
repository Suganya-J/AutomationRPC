package RemotePCHelpdesk.Scripts.computerManagement;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeoutException;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.sikuli.script.Pattern;
import org.sikuli.script.Screen;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import RemotePCHelpdesk.PageLibrary.computerManagement.ComputerManagement;
import RemotePCHelpdesk.PageLibrary.forgotPasswordPage.ForgotPassword;
import RemotePCHelpdesk.PageLibrary.homePage.HomePage;
import RemotePCHelpdesk.PageLibrary.invitedUserPage.InvitedUserPage;
import RemotePCHelpdesk.PageLibrary.loginPage.Login;
import RemotePCHelpdesk.Scripts.login.LoginToRPCEnterpriseAccount;
import RemotePCHelpdesk.TestBase.TestBase;

public class ConnectToWindowsHost extends TestBase{
	
	ComputerManagement computers = null;
	Login login = null;
	HomePage hmPage = null;

	@Parameters({ "excelFileStatus", "browser", "headlessMode" })
	@BeforeClass
	public void initializeEnvironment(@Optional("yes") String excelFileStatus, @Optional("chrome") String browser,
			@Optional("no") String headlessMode) throws FileNotFoundException, IOException {
		try {
			initializeProjectEnvironment(excelFileStatus, browser, headlessMode);
		} catch (FileNotFoundException fnfe) {
			System.out.println("Properties file could not be found");
			fnfe.printStackTrace();
		} catch (IOException ioe) {
			System.out.println("Path for file is not found or incorrect.");
			ioe.printStackTrace();
		} catch (TimeoutException toe) {
			System.out.println("Wait creation failed");
		} catch (Exception e) {
			e.printStackTrace();
		}

		login = new Login(myBrowser, wait);
		computers = new ComputerManagement(myBrowser, wait);
		moduleName = ConnectToWindowsHost.class.getSimpleName();
	}
	// *** Make sure to keep your downloads directory empty before running this test**/
	@Test
	public void addingCommentsfromSuperAdmin() {
		// Login to the account by entering credentials.
		login.launchURL(repository.getProperty("rpcLoginPage"));
		login.enterText(repository.getProperty("txtbxEmail"), "ID", "suganya.panneerselvam+dec24@idrive.com");
		login.enterText(repository.getProperty("txtbxPWD"), "ID", "test90");
		login.click(repository.getProperty("btnLogin"), "ID");
		try {
			wait.until(ExpectedConditions
					.visibilityOfElementLocated(By.xpath(repository.getProperty("computers.StatusOnline2"))));

		} catch (Exception e) {
			System.out.println("Computer status is not online");
			moduleTestResult = "Fail";
			testResultComment = "\n" + e.getMessage();
			System.out.println(e.getMessage());
		}
		
		try {
		//******* Connection to host********//	
		computers.click(repository.getProperty("computers.Connect"),"xpath");
	    computers.click(repository.getProperty("computers.Connect.btnViewerLite"),"xpath");
	    System.out.println("Computer connected");
	    
	    //******* Disconnected successfully*****//
	    wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath(repository.getProperty("computers.Disconnect"))));
	    try {
	    	// Wait time for getting the time stamp
	    	Thread.sleep(2000);
	    }catch(InterruptedException e){
	    	e.getMessage();
	    }
	   computers.click(repository.getProperty("computers.Disconnect"),"xpath");
	   computers.click(repository.getProperty("computers.Disconnect.btnOk"),"xpath");
	   WebElement newV = myBrowser.findElement(By.xpath(repository.getProperty("computers.AccessedDate")));
	   
	   System.out.println(newV.getText());
	    
	    //*******
	    moduleTestResult = "Pass";    		
		testResultComment = "Comments added";
		
		} catch(Exception e) {
		System.out.println("Connection failed");
		moduleTestResult = "Fail";
		testResultComment = "\n" + e.getMessage();
		System.out.println(e.getMessage());
		}
	}
	@AfterClass
	public void closeEnvironment() {
		// Write the test results and then shut down the environment.
		System.out.println("\n===============");
		System.out.println("Module name: " + moduleName);
		System.out.println("Module test result: " + moduleTestResult);
		System.out.println("Test result comment: " + testResultComment);
	    excelUtility.writeTestStatus(moduleName, moduleTestResult, testResultComment);
		//myBrowser.close();
		}	
}
